// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "WallE/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: produk
func (_m *ProductService) AddProduct(produk models.Produk) error {
	ret := _m.Called(produk)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Produk) error); ok {
		r0 = rf(produk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddSaldo provides a mock function with given fields: saldobaru, kategoriid
func (_m *ProductService) AddSaldo(saldobaru int, kategoriid uint) error {
	ret := _m.Called(saldobaru, kategoriid)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(saldobaru, kategoriid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProdukById provides a mock function with given fields: id
func (_m *ProductService) DeleteProdukById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKategori provides a mock function with given fields:
func (_m *ProductService) GetKategori() []models.Kategori {
	ret := _m.Called()

	var r0 []models.Kategori
	if rf, ok := ret.Get(0).(func() []models.Kategori); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Kategori)
		}
	}

	return r0
}

// GetProdukById provides a mock function with given fields: id
func (_m *ProductService) GetProdukById(id uint) models.Produk {
	ret := _m.Called(id)

	var r0 models.Produk
	if rf, ok := ret.Get(0).(func(uint) models.Produk); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Produk)
	}

	return r0
}

// GetProdukByKategori provides a mock function with given fields: kategoriid
func (_m *ProductService) GetProdukByKategori(kategoriid uint) []models.Produk {
	ret := _m.Called(kategoriid)

	var r0 []models.Produk
	if rf, ok := ret.Get(0).(func(uint) []models.Produk); ok {
		r0 = rf(kategoriid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Produk)
		}
	}

	return r0
}

// GetProdukByKategoriProvider provides a mock function with given fields: kategoriid, providerid
func (_m *ProductService) GetProdukByKategoriProvider(kategoriid uint, providerid uint) []models.Produk {
	ret := _m.Called(kategoriid, providerid)

	var r0 []models.Produk
	if rf, ok := ret.Get(0).(func(uint, uint) []models.Produk); ok {
		r0 = rf(kategoriid, providerid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Produk)
		}
	}

	return r0
}

// GetProviderByKategori provides a mock function with given fields: kategoriid
func (_m *ProductService) GetProviderByKategori(kategoriid uint) interface{} {
	ret := _m.Called(kategoriid)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint) interface{}); ok {
		r0 = rf(kategoriid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetPurchaseableProduct provides a mock function with given fields: kategoriid, providerid
func (_m *ProductService) GetPurchaseableProduct(kategoriid uint, providerid uint) interface{} {
	ret := _m.Called(kategoriid, providerid)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint, uint) interface{}); ok {
		r0 = rf(kategoriid, providerid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetSaldo provides a mock function with given fields:
func (_m *ProductService) GetSaldo() []models.Saldo {
	ret := _m.Called()

	var r0 []models.Saldo
	if rf, ok := ret.Get(0).(func() []models.Saldo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Saldo)
		}
	}

	return r0
}

// UpdateProductById provides a mock function with given fields: id, produk
func (_m *ProductService) UpdateProductById(id uint, produk models.Produk) error {
	ret := _m.Called(id, produk)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, models.Produk) error); ok {
		r0 = rf(id, produk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
