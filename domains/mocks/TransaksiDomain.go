// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "WallE/models"

	mock "github.com/stretchr/testify/mock"
)

// TransaksiDomain is an autogenerated mock type for the TransaksiDomain type
type TransaksiDomain struct {
	mock.Mock
}

// GetAllTransaction provides a mock function with given fields: filter
func (_m *TransaksiDomain) GetAllTransaction(filter string) []models.Transaksi {
	ret := _m.Called(filter)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(string) []models.Transaksi); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// GetLastId provides a mock function with given fields:
func (_m *TransaksiDomain) GetLastId() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetListTransactionByUserId provides a mock function with given fields: userid
func (_m *TransaksiDomain) GetListTransactionByUserId(userid uint) []models.Transaksi {
	ret := _m.Called(userid)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(uint) []models.Transaksi); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// GetProdukById provides a mock function with given fields: id
func (_m *TransaksiDomain) GetProdukById(id uint) models.Produk {
	ret := _m.Called(id)

	var r0 models.Produk
	if rf, ok := ret.Get(0).(func(uint) models.Produk); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Produk)
	}

	return r0
}

// GetTotalIncome provides a mock function with given fields:
func (_m *TransaksiDomain) GetTotalIncome() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetTransactionById provides a mock function with given fields: id
func (_m *TransaksiDomain) GetTransactionById(id uint) models.Transaksi {
	ret := _m.Called(id)

	var r0 models.Transaksi
	if rf, ok := ret.Get(0).(func(uint) models.Transaksi); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Transaksi)
	}

	return r0
}

// GetTransactionByOrderId provides a mock function with given fields: orderid
func (_m *TransaksiDomain) GetTransactionByOrderId(orderid string) models.Transaksi {
	ret := _m.Called(orderid)

	var r0 models.Transaksi
	if rf, ok := ret.Get(0).(func(string) models.Transaksi); ok {
		r0 = rf(orderid)
	} else {
		r0 = ret.Get(0).(models.Transaksi)
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *TransaksiDomain) GetUserById(id uint) models.User {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uint) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// GetUserTransactions provides a mock function with given fields: id, filter
func (_m *TransaksiDomain) GetUserTransactions(id uint, filter string) []models.Transaksi {
	ret := _m.Called(id, filter)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(uint, string) []models.Transaksi); ok {
		r0 = rf(id, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// ReduceBalance provides a mock function with given fields: id, balance
func (_m *TransaksiDomain) ReduceBalance(id uint, balance int) error {
	ret := _m.Called(id, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(id, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefundBalance provides a mock function with given fields: id, balance
func (_m *TransaksiDomain) RefundBalance(id uint, balance int) error {
	ret := _m.Called(id, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, int) error); ok {
		r0 = rf(id, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransaksiBaru provides a mock function with given fields: transaksi
func (_m *TransaksiDomain) TransaksiBaru(transaksi models.Transaksi) error {
	ret := _m.Called(transaksi)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Transaksi) error); ok {
		r0 = rf(transaksi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaksi provides a mock function with given fields: orderid, transkasi
func (_m *TransaksiDomain) UpdateTransaksi(orderid string, transkasi models.Transaksi) error {
	ret := _m.Called(orderid, transkasi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Transaksi) error); ok {
		r0 = rf(orderid, transkasi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransaksiDomain interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaksiDomain creates a new instance of TransaksiDomain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaksiDomain(t mockConstructorTestingTNewTransaksiDomain) *TransaksiDomain {
	mock := &TransaksiDomain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
