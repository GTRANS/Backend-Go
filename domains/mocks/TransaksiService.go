// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "WallE/models"

	mock "github.com/stretchr/testify/mock"
)

// TransaksiService is an autogenerated mock type for the TransaksiService type
type TransaksiService struct {
	mock.Mock
}

// GetAllTransaction provides a mock function with given fields: filter
func (_m *TransaksiService) GetAllTransaction(filter string) []models.Transaksi {
	ret := _m.Called(filter)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(string) []models.Transaksi); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// GetListTransactionByUserId provides a mock function with given fields: userid
func (_m *TransaksiService) GetListTransactionByUserId(userid uint) []models.Transaksi {
	ret := _m.Called(userid)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(uint) []models.Transaksi); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// GetUserTransactions provides a mock function with given fields: id, filter
func (_m *TransaksiService) GetUserTransactions(id uint, filter string) []models.Transaksi {
	ret := _m.Called(id, filter)

	var r0 []models.Transaksi
	if rf, ok := ret.Get(0).(func(uint, string) []models.Transaksi); ok {
		r0 = rf(id, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaksi)
		}
	}

	return r0
}

// NewTransactionBank provides a mock function with given fields: transaksi
func (_m *TransaksiService) NewTransactionBank(transaksi models.Transaksi) (error, interface{}) {
	ret := _m.Called(transaksi)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Transaksi) error); ok {
		r0 = rf(transaksi)
	} else {
		r0 = ret.Error(0)
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(models.Transaksi) interface{}); ok {
		r1 = rf(transaksi)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// NewTransactionEWallet provides a mock function with given fields: transaksi
func (_m *TransaksiService) NewTransactionEWallet(transaksi models.Transaksi) (error, interface{}) {
	ret := _m.Called(transaksi)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Transaksi) error); ok {
		r0 = rf(transaksi)
	} else {
		r0 = ret.Error(0)
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(models.Transaksi) interface{}); ok {
		r1 = rf(transaksi)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// UpdateTransaksi provides a mock function with given fields: orderid, transkasi
func (_m *TransaksiService) UpdateTransaksi(orderid string, transkasi models.Transaksi) error {
	ret := _m.Called(orderid, transkasi)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.Transaksi) error); ok {
		r0 = rf(orderid, transkasi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransaksiService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaksiService creates a new instance of TransaksiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaksiService(t mockConstructorTestingTNewTransaksiService) *TransaksiService {
	mock := &TransaksiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
